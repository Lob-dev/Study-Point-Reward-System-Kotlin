/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.dsl.Indexes;
import jooq.dsl.JPoint;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.JPointHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPointHistory extends TableImpl<JPointHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>point.point_history</code>
     */
    public static final JPointHistory POINT_HISTORY = new JPointHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPointHistoryRecord> getRecordType() {
        return JPointHistoryRecord.class;
    }

    /**
     * The column <code>point.point_history.id</code>.
     */
    public final TableField<JPointHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>point.point_history.create_at</code>.
     */
    public final TableField<JPointHistoryRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>point.point_history.update_at</code>.
     */
    public final TableField<JPointHistoryRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>point.point_history.action_type</code>.
     */
    public final TableField<JPointHistoryRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>point.point_history.event_id</code>.
     */
    public final TableField<JPointHistoryRecord, String> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>point.point_history.event_type</code>.
     */
    public final TableField<JPointHistoryRecord, String> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>point.point_history.point</code>.
     */
    public final TableField<JPointHistoryRecord, Long> POINT = createField(DSL.name("point"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>point.point_history.user_id</code>.
     */
    public final TableField<JPointHistoryRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>point.point_history.associate_history_id</code>.
     */
    public final TableField<JPointHistoryRecord, Long> ASSOCIATE_HISTORY_ID = createField(DSL.name("associate_history_id"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    private JPointHistory(Name alias, Table<JPointHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPointHistory(Name alias, Table<JPointHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>point.point_history</code> table reference
     */
    public JPointHistory(String alias) {
        this(DSL.name(alias), POINT_HISTORY);
    }

    /**
     * Create an aliased <code>point.point_history</code> table reference
     */
    public JPointHistory(Name alias) {
        this(alias, POINT_HISTORY);
    }

    /**
     * Create a <code>point.point_history</code> table reference
     */
    public JPointHistory() {
        this(DSL.name("point_history"), null);
    }

    public <O extends Record> JPointHistory(Table<O> child, ForeignKey<O, JPointHistoryRecord> key) {
        super(child, key, POINT_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPoint.POINT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POINT_HISTORY_IDX_POINT_HISTORY_USER_ID);
    }

    @Override
    public UniqueKey<JPointHistoryRecord> getPrimaryKey() {
        return Keys.KEY_POINT_HISTORY_PRIMARY;
    }

    @Override
    public JPointHistory as(String alias) {
        return new JPointHistory(DSL.name(alias), this);
    }

    @Override
    public JPointHistory as(Name alias) {
        return new JPointHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPointHistory rename(String name) {
        return new JPointHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPointHistory rename(Name name) {
        return new JPointHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, LocalDateTime, LocalDateTime, String, String, String, Long, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
