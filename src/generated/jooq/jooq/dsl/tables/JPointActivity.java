/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.dsl.Indexes;
import jooq.dsl.JPoint;
import jooq.dsl.Keys;
import jooq.dsl.tables.records.JPointActivityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPointActivity extends TableImpl<JPointActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>point.point_activity</code>
     */
    public static final JPointActivity POINT_ACTIVITY = new JPointActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPointActivityRecord> getRecordType() {
        return JPointActivityRecord.class;
    }

    /**
     * The column <code>point.point_activity.id</code>.
     */
    public final TableField<JPointActivityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>point.point_activity.action_type</code>.
     */
    public final TableField<JPointActivityRecord, String> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>point.point_activity.current_point</code>.
     */
    public final TableField<JPointActivityRecord, Long> CURRENT_POINT = createField(DSL.name("current_point"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>point.point_activity.expire_at</code>.
     */
    public final TableField<JPointActivityRecord, LocalDateTime> EXPIRE_AT = createField(DSL.name("expire_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("NULL", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>point.point_activity.initial_point</code>.
     */
    public final TableField<JPointActivityRecord, Long> INITIAL_POINT = createField(DSL.name("initial_point"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>point.point_activity.point_type</code>.
     */
    public final TableField<JPointActivityRecord, String> POINT_TYPE = createField(DSL.name("point_type"), SQLDataType.VARCHAR(255).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>point.point_activity.user_id</code>.
     */
    public final TableField<JPointActivityRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private JPointActivity(Name alias, Table<JPointActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPointActivity(Name alias, Table<JPointActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>point.point_activity</code> table reference
     */
    public JPointActivity(String alias) {
        this(DSL.name(alias), POINT_ACTIVITY);
    }

    /**
     * Create an aliased <code>point.point_activity</code> table reference
     */
    public JPointActivity(Name alias) {
        this(alias, POINT_ACTIVITY);
    }

    /**
     * Create a <code>point.point_activity</code> table reference
     */
    public JPointActivity() {
        this(DSL.name("point_activity"), null);
    }

    public <O extends Record> JPointActivity(Table<O> child, ForeignKey<O, JPointActivityRecord> key) {
        super(child, key, POINT_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPoint.POINT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POINT_ACTIVITY_IDX_POINT_ACTIVITY_USER_ID);
    }

    @Override
    public UniqueKey<JPointActivityRecord> getPrimaryKey() {
        return Keys.KEY_POINT_ACTIVITY_PRIMARY;
    }

    @Override
    public JPointActivity as(String alias) {
        return new JPointActivity(DSL.name(alias), this);
    }

    @Override
    public JPointActivity as(Name alias) {
        return new JPointActivity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPointActivity rename(String name) {
        return new JPointActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPointActivity rename(Name name) {
        return new JPointActivity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, LocalDateTime, Long, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
